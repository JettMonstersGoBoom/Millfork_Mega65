
import stdio
import mega.dma 

const byte SCREEN_WIDTH=80
const word SCREEN_SIZE=(SCREEN_WIDTH*25)
const int24 SCREEN_BASE = $0800

void main() {
	byte ticker
	asm {
		sei
	}
	
	M65_40hz()
	M65_defaultmem()
	M65_VIC4Enable()
	M65_disable_rom()
	M65_dma_prepare()

	//	for 80 col mode
	vic4_charstep = SCREEN_WIDTH 	
	vic4_charcount = SCREEN_WIDTH
	vic4_screen_ptr = SCREEN_BASE

	//	set dma skip to 1 byte 
	//	for a fill 
	DMAJob.scr_skip_lsb = 1	//	make no difference for FILL
	DMAJob.dst_bank = $ff	//	for color ram
	DMAJob.source.lo=$1
	DMAJob.destination = $80000
	DMAJob.size = SCREEN_SIZE
	DMAJob.type = DMA_FILL
	M65_dma_kick()

	//	clear screen 
	DMAJob.dst_bank = $0	
	//	using the space char $20 
	DMAJob.source.lo=$20
	//	to the screen
	DMAJob.destination = SCREEN_BASE
	//	how big 
	DMAJob.size = SCREEN_SIZE
	//	what we're doing 
	DMAJob.type = DMA_FILL
	//	kick the DMA off 
	M65_dma_kick()

	//	just a straight horizontal copy
	DMAJob.scr_skip_lsb = 1
	DMAJob.dst_skip_lsb = 1
	DMAJob.dst_bank = $00	
	DMAJob.source=hello_world.addr
	DMAJob.destination = SCREEN_BASE
	DMAJob.size = hello_world.length
	//	COPY 
	DMAJob.type = DMA_COPY
	//	kick the DMA off 
	M65_dma_kick()

	//	skip of 2 on destination 
	DMAJob.dst_skip_lsb = 2
	//	so H E L L O instead of HELLO
	DMAJob.source=hello_world.addr
	DMAJob.destination = SCREEN_BASE + 80 
	//	kick the DMA off 
	M65_dma_kick()
	//	draw a strip down 
	DMAJob.dst_skip_lsb = vic4_charstep.lo
	//	H
	//	E 
	//	L .. etc
	DMAJob.source=hello_world.addr
	DMAJob.destination = SCREEN_BASE + 78 
	M65_dma_kick()

	//	set border to index 0 
	vic_border = 0

	while true {
		//	mix asm wherever you like
		asm 
		{
vbl:
			//	show raster pos as colors
			ldx $d012
			clc 
			txa
			adc ticker
			sta $d100 
			sta $d200 
			sta $d300
			cpx #$f0
			bne vbl
		}

		//	this just counts up once per frame
		ticker+=1
	}
}

const array hello_world=["hello mega65, hope you have some fun !  " scr]
